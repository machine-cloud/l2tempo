{
  "name": "logfmt",
  "version": "0.9.1",
  "description": "Key-Value log line parser",
  "main": "logfmt.js",
  "scripts": {
    "test": "./test/test"
  },
  "bin": {
    "logfmt": "./bin/logfmt"
  },
  "dependencies": {
    "split": "*",
    "through": "*",
    "readable-stream": "*"
  },
  "devDependencies": {
    "express": "3.*",
    "mocha": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/csquared/node-logfmt"
  },
  "keywords": [
    "Log",
    "Parser",
    "logfmt"
  ],
  "author": {
    "name": "csquared"
  },
  "license": "BSD",
  "readme": "# node-logfmt\n\n\"logfmt\" is the name for a [key value logging convention](https://github.com/kr/logfmt) we've adopted at Heroku.\n\nThis library is for both logging object to logfmt format and converting\nlines in logfmt format to objects.  It provides a parser, a simple log\nmethod, and both streaming and non-streaming body parsers for express.\n\nYou should use this library if you're trying to write structured logs or\nif you're consuming them (especially if you're writing a logplex drain).\n\n## install\n\n    npm install logfmt\n\n# use\n\n```javascript\nvar logfmt = require('logfmt');\n```\n\n## logging\n\n### `logfmt.log()`\n\nDefaults to logging to `process.stdout`\n\n```javascript\nvar logfmt = require('logfmt');\nlogfmt.log({ \"foo\": \"bar\", \"a\": 14, baz: 'hello kitty'})\n//=> foo=bar a=14 baz=\"hello kitty\"\n```\n\n### customizing logging location\n\n`log()` Accepts as 2nd arg anything that responds to `write(string)`\n```javascript\nvar logfmt = require('logfmt');\nlogfmt.log({ \"foo\": \"bar\", \"a\": 14, baz: 'hello kitty'}, process.stderr)\n//=> foo=bar a=14 baz=\"hello kitty\"\n```\n\nOverwrite the default location by setting `.stream`\n```javascript\nvar logfmt = require('logfmt');\nlogfmt.stream = process.stderr\n\nlogfmt.log({ \"foo\": \"bar\", \"a\": 14, baz: 'hello kitty'})\n//=> foo=bar a=14 baz=\"hello kitty\"\n```\n\n\n## parser\n\n### `logfmt.parse()`\n\n```javascript\nvar logfmt = require('logfmt');\n\nlogfmt.parse(\"foo=bar a=14 baz=\\\"hello kitty\\\" cool%story=bro f %^asdf code=H12\")\n//=>{ \"foo\": \"bar\", \"a\": 14, \"baz\": \"hello kitty\", \"cool%story\": \"bro\", \"f\": true, \"%^asdf\": true, \"code\" : \"H12\" }\n```\n\n### express middleware\n\n#### Streaming\n\n##### `logfmt.bodyParserStream(opts)`\n\n    Valid Options:\n      contentType: defaults to 'application/logplex-1'\n\nIf you use the `logfmt.bodyParserStream()` for a body parser,\nyou will have a `req.body` that is a readable stream.\n\nPipes FTW:\n\n```javascript\nvar app    = require('express')();\nvar http   = require('http');\nvar through = require('through');\nvar logfmt  = require('logfmt');\n\napp.use(logfmt.bodyParserStream());\n\napp.post('/logs', function(req, res){\n  if(!req.body) return res.send('OK');\n\n  req.body.pipe(through(function(line){\n    console.dir(line);\n  }))\n\n  res.send('OK');\n})\n\nhttp.createServer(app).listen(3000);\n```\n\nOr you can just use the `readable` event:\n\n```javascript\nvar app    = require('express')();\nvar http   = require('http');\nvar logfmt  = require('logfmt');\n\napp.use(logfmt.bodyParserStream());\n\n// req.body is now a Readable Stream\napp.post('/logs', function(req, res){\n  req.body.on('readable', function(){\n    var parsedLine = req.body.read();\n    if(parsedLine) console.log(parsedLine);\n    else res.send('OK');\n  })\n})\n\nhttp.createServer(app).listen(3000);\n```\n\n#### Non-Streaming\n\n##### `logfmt.bodyParser(opts)`\n\n    Valid Options:\n      contentType: defaults to 'application/logplex-1'\n\nIf you use the `logfmt.bodyParser()` for a body parser,\nyou will have a `req.body` that is an array of objects.\n\n```javascript\nvar logfmt   = require('logfmt');\n\napp.use(logfmt.bodyParser());\n\n// req.body is now an array of objects\napp.post('/logs', function(req, res){\n\n  console.log('BODY: ' + JSON.stringify(req.body));\n\n  req.body.forEach(function(data){\n    console.log(data);\n  });\n\n  res.send('OK');\n})\n\nhttp.createServer(app).listen(3000);\n```\n\ntest it:\n\n```bash\ncurl -X POST --header 'Content-Type: application/logplex-1' -d \"foo=bar a=14 baz=\\\"hello kitty\\\" cool%story=bro f %^asdf\" http://localhost:3000/logs\n```\n\n### command line\n\naccepts lines on STDIN and converts them to json\n\n\n    echo \"foo=bar a=14 baz=\\\"hello kitty\\\" cool%story=bro f %^asdf\" | logfmt\n    { \"foo\": \"bar\", \"a\": 14, \"baz\": \"hello kitty\", \"cool%story\": \"bro\", \"f\": true, \"%^asdf\": true }\n\n#### reverse\n\naccepts JSON on STDIN and converts them to logfmt\n\n    echo '{ \"foo\": \"bar\", \"a\": 14, \"baz\": \"hello kitty\", \"cool%story\": \"bro\", \"f\": true, \"%^asdf\": true }' | logfmt -r\n    foo=bar a=14 baz=\"hello kitty\" cool%story=bro f=true %^asdf=true\n\n    echo \"foo=bar a=14 baz=\\\"hello kitty\\\" cool%story=bro f %^asdf\" | logfmt | logfmt -r | logfmt\n    { \"foo\": \"bar\", \"a\": 14, \"baz\": \"hello kitty\", \"cool%story\": \"bro\", \"f\": true, \"%^asdf\": true }\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/csquared/node-logfmt/issues"
  },
  "_id": "logfmt@0.9.1",
  "dist": {
    "shasum": "e9b0b2fdda90bdc5376deae20b898656b6e989ff"
  },
  "_from": "logfmt@0.9.1",
  "_resolved": "https://registry.npmjs.org/logfmt/-/logfmt-0.9.1.tgz"
}
